//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BugNET.GitHooks.WebServices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BugNetServicesSoap", Namespace="http://bugnetproject.com/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class BugNetServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ValidIssueOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewIssueRevisionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewIssueAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResolutionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMilestonesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIssueTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrioritiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectIssuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogInOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogOutOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BugNetServices() {
            this.Url = global::BugNET.GitHooks.Properties.Settings.Default.BugNET_SubversionHooks_BugNetServices_BugNetServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ValidIssueCompletedEventHandler ValidIssueCompleted;
        
        /// <remarks/>
        public event CreateNewIssueRevisionCompletedEventHandler CreateNewIssueRevisionCompleted;
        
        /// <remarks/>
        public event CreateNewIssueAttachmentCompletedEventHandler CreateNewIssueAttachmentCompleted;
        
        /// <remarks/>
        public event RenameCategoryCompletedEventHandler RenameCategoryCompleted;
        
        /// <remarks/>
        public event MoveCategoryCompletedEventHandler MoveCategoryCompleted;
        
        /// <remarks/>
        public event GetCategoriesCompletedEventHandler GetCategoriesCompleted;
        
        /// <remarks/>
        public event AddCategoryCompletedEventHandler AddCategoryCompleted;
        
        /// <remarks/>
        public event DeleteCategoryCompletedEventHandler DeleteCategoryCompleted;
        
        /// <remarks/>
        public event GetResolutionsCompletedEventHandler GetResolutionsCompleted;
        
        /// <remarks/>
        public event GetMilestonesCompletedEventHandler GetMilestonesCompleted;
        
        /// <remarks/>
        public event GetIssueTypesCompletedEventHandler GetIssueTypesCompleted;
        
        /// <remarks/>
        public event GetPrioritiesCompletedEventHandler GetPrioritiesCompleted;
        
        /// <remarks/>
        public event GetStatusCompletedEventHandler GetStatusCompleted;
        
        /// <remarks/>
        public event GetProjectIdCompletedEventHandler GetProjectIdCompleted;
        
        /// <remarks/>
        public event GetProjectIssuesCompletedEventHandler GetProjectIssuesCompleted;
        
        /// <remarks/>
        public event LogInCompletedEventHandler LogInCompleted;
        
        /// <remarks/>
        public event LogOutCompletedEventHandler LogOutCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/ValidIssue", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidIssue(int issueId) {
            object[] results = this.Invoke("ValidIssue", new object[] {
                        issueId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidIssueAsync(int issueId) {
            this.ValidIssueAsync(issueId, null);
        }
        
        /// <remarks/>
        public void ValidIssueAsync(int issueId, object userState) {
            if ((this.ValidIssueOperationCompleted == null)) {
                this.ValidIssueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidIssueOperationCompleted);
            }
            this.InvokeAsync("ValidIssue", new object[] {
                        issueId}, this.ValidIssueOperationCompleted, userState);
        }
        
        private void OnValidIssueOperationCompleted(object arg) {
            if ((this.ValidIssueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidIssueCompleted(this, new ValidIssueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/CreateNewIssueRevision", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateNewIssueRevision(int revision, int issueId, string repository, string revisionAuthor, string revisionDate, string revisionMessage, string changeset, string branch) {
            object[] results = this.Invoke("CreateNewIssueRevision", new object[] {
                        revision,
                        issueId,
                        repository,
                        revisionAuthor,
                        revisionDate,
                        revisionMessage,
                        changeset,
                        branch});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewIssueRevisionAsync(int revision, int issueId, string repository, string revisionAuthor, string revisionDate, string revisionMessage, string changeset, string branch) {
            this.CreateNewIssueRevisionAsync(revision, issueId, repository, revisionAuthor, revisionDate, revisionMessage, changeset, branch, null);
        }
        
        /// <remarks/>
        public void CreateNewIssueRevisionAsync(int revision, int issueId, string repository, string revisionAuthor, string revisionDate, string revisionMessage, string changeset, string branch, object userState) {
            if ((this.CreateNewIssueRevisionOperationCompleted == null)) {
                this.CreateNewIssueRevisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewIssueRevisionOperationCompleted);
            }
            this.InvokeAsync("CreateNewIssueRevision", new object[] {
                        revision,
                        issueId,
                        repository,
                        revisionAuthor,
                        revisionDate,
                        revisionMessage,
                        changeset,
                        branch}, this.CreateNewIssueRevisionOperationCompleted, userState);
        }
        
        private void OnCreateNewIssueRevisionOperationCompleted(object arg) {
            if ((this.CreateNewIssueRevisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewIssueRevisionCompleted(this, new CreateNewIssueRevisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/CreateNewIssueAttachment", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateNewIssueAttachment(int issueId, string creatorUserName, string fileName, string contentType, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] attachment, int size, string description) {
            object[] results = this.Invoke("CreateNewIssueAttachment", new object[] {
                        issueId,
                        creatorUserName,
                        fileName,
                        contentType,
                        attachment,
                        size,
                        description});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewIssueAttachmentAsync(int issueId, string creatorUserName, string fileName, string contentType, byte[] attachment, int size, string description) {
            this.CreateNewIssueAttachmentAsync(issueId, creatorUserName, fileName, contentType, attachment, size, description, null);
        }
        
        /// <remarks/>
        public void CreateNewIssueAttachmentAsync(int issueId, string creatorUserName, string fileName, string contentType, byte[] attachment, int size, string description, object userState) {
            if ((this.CreateNewIssueAttachmentOperationCompleted == null)) {
                this.CreateNewIssueAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewIssueAttachmentOperationCompleted);
            }
            this.InvokeAsync("CreateNewIssueAttachment", new object[] {
                        issueId,
                        creatorUserName,
                        fileName,
                        contentType,
                        attachment,
                        size,
                        description}, this.CreateNewIssueAttachmentOperationCompleted, userState);
        }
        
        private void OnCreateNewIssueAttachmentOperationCompleted(object arg) {
            if ((this.CreateNewIssueAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewIssueAttachmentCompleted(this, new CreateNewIssueAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/RenameCategory", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RenameCategory(string categoryId, string name) {
            this.Invoke("RenameCategory", new object[] {
                        categoryId,
                        name});
        }
        
        /// <remarks/>
        public void RenameCategoryAsync(string categoryId, string name) {
            this.RenameCategoryAsync(categoryId, name, null);
        }
        
        /// <remarks/>
        public void RenameCategoryAsync(string categoryId, string name, object userState) {
            if ((this.RenameCategoryOperationCompleted == null)) {
                this.RenameCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameCategoryOperationCompleted);
            }
            this.InvokeAsync("RenameCategory", new object[] {
                        categoryId,
                        name}, this.RenameCategoryOperationCompleted, userState);
        }
        
        private void OnRenameCategoryOperationCompleted(object arg) {
            if ((this.RenameCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/MoveCategory", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveCategory(string categoryId, string oldParentId, string newParentId) {
            this.Invoke("MoveCategory", new object[] {
                        categoryId,
                        oldParentId,
                        newParentId});
        }
        
        /// <remarks/>
        public void MoveCategoryAsync(string categoryId, string oldParentId, string newParentId) {
            this.MoveCategoryAsync(categoryId, oldParentId, newParentId, null);
        }
        
        /// <remarks/>
        public void MoveCategoryAsync(string categoryId, string oldParentId, string newParentId, object userState) {
            if ((this.MoveCategoryOperationCompleted == null)) {
                this.MoveCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveCategoryOperationCompleted);
            }
            this.InvokeAsync("MoveCategory", new object[] {
                        categoryId,
                        oldParentId,
                        newParentId}, this.MoveCategoryOperationCompleted, userState);
        }
        
        private void OnMoveCategoryOperationCompleted(object arg) {
            if ((this.MoveCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/GetCategories", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCategories(string projectId) {
            object[] results = this.Invoke("GetCategories", new object[] {
                        projectId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoriesAsync(string projectId) {
            this.GetCategoriesAsync(projectId, null);
        }
        
        /// <remarks/>
        public void GetCategoriesAsync(string projectId, object userState) {
            if ((this.GetCategoriesOperationCompleted == null)) {
                this.GetCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetCategories", new object[] {
                        projectId}, this.GetCategoriesOperationCompleted, userState);
        }
        
        private void OnGetCategoriesOperationCompleted(object arg) {
            if ((this.GetCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoriesCompleted(this, new GetCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/AddCategory", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCategory(string projectId, string name, string parentCategoryId) {
            object[] results = this.Invoke("AddCategory", new object[] {
                        projectId,
                        name,
                        parentCategoryId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCategoryAsync(string projectId, string name, string parentCategoryId) {
            this.AddCategoryAsync(projectId, name, parentCategoryId, null);
        }
        
        /// <remarks/>
        public void AddCategoryAsync(string projectId, string name, string parentCategoryId, object userState) {
            if ((this.AddCategoryOperationCompleted == null)) {
                this.AddCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCategoryOperationCompleted);
            }
            this.InvokeAsync("AddCategory", new object[] {
                        projectId,
                        name,
                        parentCategoryId}, this.AddCategoryOperationCompleted, userState);
        }
        
        private void OnAddCategoryOperationCompleted(object arg) {
            if ((this.AddCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCategoryCompleted(this, new AddCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/DeleteCategory", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCategory(string categoryId) {
            this.Invoke("DeleteCategory", new object[] {
                        categoryId});
        }
        
        /// <remarks/>
        public void DeleteCategoryAsync(string categoryId) {
            this.DeleteCategoryAsync(categoryId, null);
        }
        
        /// <remarks/>
        public void DeleteCategoryAsync(string categoryId, object userState) {
            if ((this.DeleteCategoryOperationCompleted == null)) {
                this.DeleteCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCategoryOperationCompleted);
            }
            this.InvokeAsync("DeleteCategory", new object[] {
                        categoryId}, this.DeleteCategoryOperationCompleted, userState);
        }
        
        private void OnDeleteCategoryOperationCompleted(object arg) {
            if ((this.DeleteCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/GetResolutions", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetResolutions(int ProjectId) {
            object[] results = this.Invoke("GetResolutions", new object[] {
                        ProjectId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetResolutionsAsync(int ProjectId) {
            this.GetResolutionsAsync(ProjectId, null);
        }
        
        /// <remarks/>
        public void GetResolutionsAsync(int ProjectId, object userState) {
            if ((this.GetResolutionsOperationCompleted == null)) {
                this.GetResolutionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResolutionsOperationCompleted);
            }
            this.InvokeAsync("GetResolutions", new object[] {
                        ProjectId}, this.GetResolutionsOperationCompleted, userState);
        }
        
        private void OnGetResolutionsOperationCompleted(object arg) {
            if ((this.GetResolutionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResolutionsCompleted(this, new GetResolutionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/GetMilestones", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMilestones(int ProjectId) {
            object[] results = this.Invoke("GetMilestones", new object[] {
                        ProjectId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMilestonesAsync(int ProjectId) {
            this.GetMilestonesAsync(ProjectId, null);
        }
        
        /// <remarks/>
        public void GetMilestonesAsync(int ProjectId, object userState) {
            if ((this.GetMilestonesOperationCompleted == null)) {
                this.GetMilestonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMilestonesOperationCompleted);
            }
            this.InvokeAsync("GetMilestones", new object[] {
                        ProjectId}, this.GetMilestonesOperationCompleted, userState);
        }
        
        private void OnGetMilestonesOperationCompleted(object arg) {
            if ((this.GetMilestonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMilestonesCompleted(this, new GetMilestonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/GetIssueTypes", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetIssueTypes(int ProjectId) {
            object[] results = this.Invoke("GetIssueTypes", new object[] {
                        ProjectId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetIssueTypesAsync(int ProjectId) {
            this.GetIssueTypesAsync(ProjectId, null);
        }
        
        /// <remarks/>
        public void GetIssueTypesAsync(int ProjectId, object userState) {
            if ((this.GetIssueTypesOperationCompleted == null)) {
                this.GetIssueTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIssueTypesOperationCompleted);
            }
            this.InvokeAsync("GetIssueTypes", new object[] {
                        ProjectId}, this.GetIssueTypesOperationCompleted, userState);
        }
        
        private void OnGetIssueTypesOperationCompleted(object arg) {
            if ((this.GetIssueTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIssueTypesCompleted(this, new GetIssueTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/GetPriorities", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetPriorities(int ProjectId) {
            object[] results = this.Invoke("GetPriorities", new object[] {
                        ProjectId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPrioritiesAsync(int ProjectId) {
            this.GetPrioritiesAsync(ProjectId, null);
        }
        
        /// <remarks/>
        public void GetPrioritiesAsync(int ProjectId, object userState) {
            if ((this.GetPrioritiesOperationCompleted == null)) {
                this.GetPrioritiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrioritiesOperationCompleted);
            }
            this.InvokeAsync("GetPriorities", new object[] {
                        ProjectId}, this.GetPrioritiesOperationCompleted, userState);
        }
        
        private void OnGetPrioritiesOperationCompleted(object arg) {
            if ((this.GetPrioritiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrioritiesCompleted(this, new GetPrioritiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/GetStatus", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetStatus(int ProjectId) {
            object[] results = this.Invoke("GetStatus", new object[] {
                        ProjectId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusAsync(int ProjectId) {
            this.GetStatusAsync(ProjectId, null);
        }
        
        /// <remarks/>
        public void GetStatusAsync(int ProjectId, object userState) {
            if ((this.GetStatusOperationCompleted == null)) {
                this.GetStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOperationCompleted);
            }
            this.InvokeAsync("GetStatus", new object[] {
                        ProjectId}, this.GetStatusOperationCompleted, userState);
        }
        
        private void OnGetStatusOperationCompleted(object arg) {
            if ((this.GetStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusCompleted(this, new GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/GetProjectId", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetProjectId(string ProjectCode) {
            object[] results = this.Invoke("GetProjectId", new object[] {
                        ProjectCode});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectIdAsync(string ProjectCode) {
            this.GetProjectIdAsync(ProjectCode, null);
        }
        
        /// <remarks/>
        public void GetProjectIdAsync(string ProjectCode, object userState) {
            if ((this.GetProjectIdOperationCompleted == null)) {
                this.GetProjectIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectIdOperationCompleted);
            }
            this.InvokeAsync("GetProjectId", new object[] {
                        ProjectCode}, this.GetProjectIdOperationCompleted, userState);
        }
        
        private void OnGetProjectIdOperationCompleted(object arg) {
            if ((this.GetProjectIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectIdCompleted(this, new GetProjectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/GetProjectIssues", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetProjectIssues(int ProjectId, string Filter) {
            object[] results = this.Invoke("GetProjectIssues", new object[] {
                        ProjectId,
                        Filter});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectIssuesAsync(int ProjectId, string Filter) {
            this.GetProjectIssuesAsync(ProjectId, Filter, null);
        }
        
        /// <remarks/>
        public void GetProjectIssuesAsync(int ProjectId, string Filter, object userState) {
            if ((this.GetProjectIssuesOperationCompleted == null)) {
                this.GetProjectIssuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectIssuesOperationCompleted);
            }
            this.InvokeAsync("GetProjectIssues", new object[] {
                        ProjectId,
                        Filter}, this.GetProjectIssuesOperationCompleted, userState);
        }
        
        private void OnGetProjectIssuesOperationCompleted(object arg) {
            if ((this.GetProjectIssuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectIssuesCompleted(this, new GetProjectIssuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/LogIn", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LogIn(string userName, string password) {
            object[] results = this.Invoke("LogIn", new object[] {
                        userName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogInAsync(string userName, string password) {
            this.LogInAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void LogInAsync(string userName, string password, object userState) {
            if ((this.LogInOperationCompleted == null)) {
                this.LogInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInOperationCompleted);
            }
            this.InvokeAsync("LogIn", new object[] {
                        userName,
                        password}, this.LogInOperationCompleted, userState);
        }
        
        private void OnLogInOperationCompleted(object arg) {
            if ((this.LogInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInCompleted(this, new LogInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bugnetproject.com/LogOut", RequestNamespace="http://bugnetproject.com/", ResponseNamespace="http://bugnetproject.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogOut() {
            this.Invoke("LogOut", new object[0]);
        }
        
        /// <remarks/>
        public void LogOutAsync() {
            this.LogOutAsync(null);
        }
        
        /// <remarks/>
        public void LogOutAsync(object userState) {
            if ((this.LogOutOperationCompleted == null)) {
                this.LogOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogOutOperationCompleted);
            }
            this.InvokeAsync("LogOut", new object[0], this.LogOutOperationCompleted, userState);
        }
        
        private void OnLogOutOperationCompleted(object arg) {
            if ((this.LogOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogOutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ValidIssueCompletedEventHandler(object sender, ValidIssueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidIssueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidIssueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateNewIssueRevisionCompletedEventHandler(object sender, CreateNewIssueRevisionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewIssueRevisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewIssueRevisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void CreateNewIssueAttachmentCompletedEventHandler(object sender, CreateNewIssueAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewIssueAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewIssueAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void RenameCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void MoveCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetCategoriesCompletedEventHandler(object sender, GetCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AddCategoryCompletedEventHandler(object sender, AddCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DeleteCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetResolutionsCompletedEventHandler(object sender, GetResolutionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResolutionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResolutionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetMilestonesCompletedEventHandler(object sender, GetMilestonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMilestonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMilestonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetIssueTypesCompletedEventHandler(object sender, GetIssueTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIssueTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIssueTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetPrioritiesCompletedEventHandler(object sender, GetPrioritiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrioritiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrioritiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetStatusCompletedEventHandler(object sender, GetStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetProjectIdCompletedEventHandler(object sender, GetProjectIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetProjectIssuesCompletedEventHandler(object sender, GetProjectIssuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectIssuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectIssuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LogInCompletedEventHandler(object sender, LogInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LogOutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591